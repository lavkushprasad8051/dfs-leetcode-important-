 1   Flood Fill
 
 
Input: 
image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1, sc = 1, newColor = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]
class Solution {
public:
    void flood( vector<vector<int>>& image,int row,int col,int newColor,int oldColor)
    {
        if(row>=image.size() || row<0 || col>=image[0].size() || col<0 || image[row][col]!=oldColor)
        {
            return ;
        }
        image[row][col]=newColor;
         flood(image,row-1,col,newColor,oldColor);
         flood(image,row,col-1,newColor,oldColor);
         flood(image,row+1,col,newColor,oldColor);
         flood(image,row,col+1,newColor,oldColor);
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
     
        if(newColor==image[sr][sc])
        {
            return image;
        }
        flood(image,sr,sc,newColor,image[sr][sc]);
        return image;
    }
};



2 Binary Tree Paths


Easy
1953112Add to ListShare
Given a binary tree, return all root-to-leaf paths.
Note: A leaf is a node with no children.
Example:
Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3
class Solution {
public:
    void binary(vector<string>& v,TreeNode* root,string s)
    {
        if(!root->left && !root->right)
        {
            v.push_back(s);
            return ;
        }
        if(root->left)
        {
            binary(v,root->left,s+"->"+to_string(root->left->val));
        }
        if(root->right)
        {
            binary(v,root->right,s+"->"+to_string(root->right->val));
        }
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string>v;
        if(root==NULL)
        {
            return v;
        }
        binary(v,root,to_string(root->val));
        return v;
        
    }
};
